import os
from pathlib import Path

from flask import Flask, render_template, send_from_directory

app = Flask(__name__)


MODEL_DIR = Path(__file__).resolve().parent / "static" / "models"
SCAD_DIR = Path(__file__).resolve().parent.parent / "cad"

DEFAULT_MATERIAL_NAME = "flywheel_default"
MTL_TEMPLATE = (
    "# Generated by Flywheel\n"
    "newmtl {name}\n"
    "Ka 0.2 0.2 0.2\n"
    "Kd 0.8 0.8 0.8\n"
    "Ks 0.0 0.0 0.0\n"
    "d 1.0\n"
    "illum 2"
)

DEFAULT_PORT = 5000
PORT_ENV_VAR = "FLYWHEEL_WEBAPP_PORT"


def resolve_port(default: int = DEFAULT_PORT) -> int:
    """Return the port the development server should bind to.

    The default matches the documented quickstart (`http://localhost:5000`).
    Set ``FLYWHEEL_WEBAPP_PORT`` to override the port. Invalid values fall back
    to ``default`` so a mistyped environment variable does not crash the app.
    """

    raw = os.environ.get(PORT_ENV_VAR)
    if raw:
        try:
            port = int(raw)
        except ValueError:
            port = None
        else:
            if 0 < port < 65536:
                return port
    return default


def _ensure_obj_metadata(obj_path: Path) -> None:
    """Ensure OBJ files reference materials and follow viewer expectations."""

    if not obj_path.exists():  # pragma: no cover - safety guard
        return

    raw_lines = obj_path.read_text().splitlines()
    lower = [line.strip().lower() for line in raw_lines]
    mtl_name = obj_path.with_suffix(".mtl").name

    if not any(entry.startswith("mtllib ") for entry in lower):
        insert_at = 0
        while insert_at < len(raw_lines):
            current_line = raw_lines[insert_at]
            if not current_line.startswith("#"):
                break
            insert_at += 1
        raw_lines.insert(insert_at, f"mtllib {mtl_name}")
        lower = [line.strip().lower() for line in raw_lines]

    material_line = f"usemtl {DEFAULT_MATERIAL_NAME}"
    if not any(entry.startswith("usemtl ") for entry in lower):
        mtllib_index = 0
        for idx, entry in enumerate(lower):
            if entry.startswith("mtllib "):
                mtllib_index = idx
                break
        raw_lines.insert(mtllib_index + 1, material_line)

    sanitized = "\n".join(raw_lines)
    if not sanitized.endswith("\n"):
        sanitized += "\n"
    obj_path.write_text(sanitized)

    material_path = obj_path.with_suffix(".mtl")
    expected = MTL_TEMPLATE.format(name=DEFAULT_MATERIAL_NAME)
    if not expected.endswith("\n"):
        expected += "\n"
    try:
        current = material_path.read_text()
    except FileNotFoundError:
        current = None
    if current != expected:
        material_path.write_text(expected)


def ensure_obj_models():
    """Convert any .scad files in cad/ to .obj models in static/models/.

    Uses the OpenSCAD CLI if available. Only re-exports when the source file is
    newer than the existing .obj or the .obj is missing. Silently ignores
    failures so the web app still runs even if OpenSCAD isn’t installed. The
    generated OBJ is normalized to end with a newline so git hygiene checks
    pass.
    """
    if not MODEL_DIR.exists():
        MODEL_DIR.mkdir(parents=True, exist_ok=True)

    for scad_path in SCAD_DIR.glob("*.scad"):
        obj_path = MODEL_DIR / f"{scad_path.stem}.obj"
        try:
            if (
                not obj_path.exists()
                or scad_path.stat().st_mtime > obj_path.stat().st_mtime
            ):
                import shutil
                import subprocess
                import tempfile

                import trimesh

                if shutil.which("openscad") is None:
                    print(
                        "[WARN] OpenSCAD executable not found – cannot export "
                        "SCAD models."
                    )
                    break

                with tempfile.TemporaryDirectory() as tmpdir:
                    stl_path = Path(tmpdir) / f"{scad_path.stem}.stl"

                    # Export SCAD -> STL (STL is always supported)
                    print(
                        f"[INFO] Exporting {scad_path.name} -> "
                        f"{stl_path.name} (intermediate STL)…"
                    )
                    subprocess.run(
                        [
                            "openscad",
                            "-o",
                            str(stl_path),
                            str(scad_path),
                        ],
                        check=True,
                    )

                    # Convert STL -> OBJ using trimesh
                    msg = "[INFO] Converting %s -> %s …" % (
                        stl_path.name,
                        obj_path.name,
                    )
                    print(msg)
                    mesh = trimesh.load_mesh(stl_path, file_type="stl")
                    mesh.export(obj_path, file_type="obj")
                    _ensure_obj_metadata(obj_path)
        except Exception as exc:
            print(f"[ERROR] Failed to export {scad_path.name}: {exc}")


@app.route("/")
def index():
    # Ensure OBJ models are up to date with SCAD sources.
    ensure_obj_models()
    objs = sorted(p.name for p in MODEL_DIR.glob("*.obj"))
    return render_template("index.html", models=objs)


@app.route("/models/<path:filename>")
def models(filename):
    return send_from_directory(MODEL_DIR, filename)


if __name__ == "__main__":
    port = resolve_port()
    print(f"Starting Flask development server on port {port}…")
    app.run(debug=True, port=port)
